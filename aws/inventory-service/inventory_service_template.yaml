AWSTemplateFormatVersion: '2010-09-09'
Description: This stack deploys the dakobed-core-services network infrastructure and IAM resources
  to be used for a service hosted in Amazon ECS using AWS Fargate.

Parameters:
  BucketARN:
    Type: String
    Default: arn:aws:s3:::dakobed-transcriptions-service

  Image:
    Type: String
    # Update with the Docker image. "You can use images in the Docker Hub registry or specify other repositories (repository-url/image:tag)."
    Default: 710339184759.dkr.ecr.us-west-2.amazonaws.com/spring-inventory-service:latest
  ServiceName:
    Type: String
    Default: microservices-inventory-ecs-service

  ContainerPort:
    Type: Number
    Default: 8080
  LoadBalancerPort:
    Type: Number
    Default: 443

  # for autoscaling
  MinContainers:
    Type: Number
    Default: 1
  # for autoscaling
  MaxContainers:
    Type: Number
    Default: 1
  # target CPU utilization (%)
  AutoScalingTargetValue:
    Type: Number
    Default: 1


Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PrivateOne:
      CIDR: '10.0.2.0/24'


Resources:
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: MicroservicesCluster
      CapacityProviders:
        - FARGATE


  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    DependsOn: LogGroup
    Properties:
      Family: !Join ['', [!Ref ServiceName, TaskDefinition]]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 0.5GB
#      ExecutionRoleArn: arn:aws:iam::710339184759:role/ecsTaskExecutionRole
      ExecutionRoleArn: !Ref ExecutionRole
#      TaskRoleArn: !Ref TaskRole
      TaskRoleArn: 'arn:aws:iam::710339184759:role/dakobed-ecs-dynamo-role'
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref Image
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          #
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
  # A role needed by ECS

  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'




#  ContainerSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: !Join [ '', [ !Ref ServiceName, ContainerSecurityGroup ] ]
#      VpcId: vpc-0717a1cb195d96eff
#      SecurityGroupIngress:
#        - IpProtocol: tcp
#          CidrIp: 0.0.0.0/0
#          FromPort: !Ref ContainerPort
#          ToPort: !Ref ContainerPort


#  FargateContainerSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: Access to the fargate containers from the Internet
#      VpcId: !Ref 'VPC'
#      SecurityGroupIngress:
#          # Allow access to NLB from anywhere on the internet
#          - CidrIp: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
#            IpProtocol: -1



  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ServiceName, TaskDefinition]]


  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'

      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  #
  # This is a role which is used by the ECS tasks. Tasks in Amazon ECS define
  # the containers that should be deployed togehter and the resources they
  # require from a compute/memory perspective. So, the policies below will define
  # the IAM permissions that our Dakobed docker containers will have.
  # If you attempted to write any code for the Dakobed service that
  # interacted with different AWS service APIs, these roles would need to include
  # those as allowed actions.
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'


